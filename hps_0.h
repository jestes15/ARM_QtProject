#ifndef HPS_0_H
#define HPS_0_H
/*
 * This file was automatically generated by the swinfo2header utility.
 *
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 *
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'onchip_memory2_0', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY2_0_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY2_0_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_MEMORY2_0_COMPONENT_NAME onchip_memory2_0
#define ONCHIP_MEMORY2_0_BASE 0x0
#define ONCHIP_MEMORY2_0_SPAN 32768
#define ONCHIP_MEMORY2_0_END 0x7fff
#define ONCHIP_MEMORY2_0_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY2_0_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY2_0_CONTENTS_INFO ""
#define ONCHIP_MEMORY2_0_DUAL_PORT 0
#define ONCHIP_MEMORY2_0_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_INIT_CONTENTS_FILE soc_system_onchip_memory2_0
#define ONCHIP_MEMORY2_0_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY2_0_INSTANCE_ID NONE
#define ONCHIP_MEMORY2_0_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY2_0_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_MEMORY2_0_SINGLE_CLOCK_OP 0
#define ONCHIP_MEMORY2_0_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY2_0_SIZE_VALUE 32768
#define ONCHIP_MEMORY2_0_WRITABLE 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip_memory2_0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x1000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x1007
#define SYSID_QSYS_ID 2899645442
#define SYSID_QSYS_TIMESTAMP 1741802329

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x2000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x2007
#define JTAG_UART_IRQ 0
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x3000
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x300f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 8
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 0

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x4000
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x400f
#define DIPSW_PIO_IRQ 1
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x5000
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x500f
#define BUTTON_PIO_IRQ 2
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 2
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'arduino_gpio', class 'altera_avalon_pio'
 * The macros are prefixed with 'ARDUINO_GPIO_'.
 * The prefix is the slave descriptor.
 */
#define ARDUINO_GPIO_COMPONENT_TYPE altera_avalon_pio
#define ARDUINO_GPIO_COMPONENT_NAME arduino_gpio
#define ARDUINO_GPIO_BASE 0x6000
#define ARDUINO_GPIO_SPAN 32
#define ARDUINO_GPIO_END 0x601f
#define ARDUINO_GPIO_IRQ 11
#define ARDUINO_GPIO_BIT_CLEARING_EDGE_REGISTER 1
#define ARDUINO_GPIO_BIT_MODIFYING_OUTPUT_REGISTER 1
#define ARDUINO_GPIO_CAPTURE 1
#define ARDUINO_GPIO_DATA_WIDTH 8
#define ARDUINO_GPIO_DO_TEST_BENCH_WIRING 0
#define ARDUINO_GPIO_DRIVEN_SIM_VALUE 0
#define ARDUINO_GPIO_EDGE_TYPE RISING
#define ARDUINO_GPIO_FREQ 50000000
#define ARDUINO_GPIO_HAS_IN 0
#define ARDUINO_GPIO_HAS_OUT 0
#define ARDUINO_GPIO_HAS_TRI 1
#define ARDUINO_GPIO_IRQ_TYPE EDGE
#define ARDUINO_GPIO_RESET_VALUE 0

/*
 * Macros for device 'chip_id_read_mm_0', class 'chip_id_read_mm'
 * The macros are prefixed with 'CHIP_ID_READ_MM_0_'.
 * The prefix is the slave descriptor.
 */
#define CHIP_ID_READ_MM_0_COMPONENT_TYPE chip_id_read_mm
#define CHIP_ID_READ_MM_0_COMPONENT_NAME chip_id_read_mm_0
#define CHIP_ID_READ_MM_0_BASE 0x7000
#define CHIP_ID_READ_MM_0_SPAN 8
#define CHIP_ID_READ_MM_0_END 0x7007

/*
 * Macros for device 'random', class 'altera_avalon_pio'
 * The macros are prefixed with 'RANDOM_'.
 * The prefix is the slave descriptor.
 */
#define RANDOM_COMPONENT_TYPE altera_avalon_pio
#define RANDOM_COMPONENT_NAME random
#define RANDOM_BASE 0x8000
#define RANDOM_SPAN 16
#define RANDOM_END 0x800f
#define RANDOM_BIT_CLEARING_EDGE_REGISTER 0
#define RANDOM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define RANDOM_CAPTURE 0
#define RANDOM_DATA_WIDTH 32
#define RANDOM_DO_TEST_BENCH_WIRING 0
#define RANDOM_DRIVEN_SIM_VALUE 0
#define RANDOM_EDGE_TYPE NONE
#define RANDOM_FREQ 50000000
#define RANDOM_HAS_IN 1
#define RANDOM_HAS_OUT 0
#define RANDOM_HAS_TRI 0
#define RANDOM_IRQ_TYPE NONE
#define RANDOM_RESET_VALUE 0

/*
 * Macros for device 'alt_vip_cl_vfb_hdmi', class 'alt_vip_cl_vfb'
 * The macros are prefixed with 'ALT_VIP_CL_VFB_HDMI_'.
 * The prefix is the slave descriptor.
 */
#define ALT_VIP_CL_VFB_HDMI_COMPONENT_TYPE alt_vip_cl_vfb
#define ALT_VIP_CL_VFB_HDMI_COMPONENT_NAME alt_vip_cl_vfb_hdmi
#define ALT_VIP_CL_VFB_HDMI_BASE 0x8000
#define ALT_VIP_CL_VFB_HDMI_SPAN 64
#define ALT_VIP_CL_VFB_HDMI_END 0x803f
#define ALT_VIP_CL_VFB_HDMI_IRQ 10

/*
 * Macros for device 'ctrl_register', class 'altera_avalon_pio'
 * The macros are prefixed with 'CTRL_REGISTER_'.
 * The prefix is the slave descriptor.
 */
#define CTRL_REGISTER_COMPONENT_TYPE altera_avalon_pio
#define CTRL_REGISTER_COMPONENT_NAME ctrl_register
#define CTRL_REGISTER_BASE 0x8010
#define CTRL_REGISTER_SPAN 16
#define CTRL_REGISTER_END 0x801f
#define CTRL_REGISTER_BIT_CLEARING_EDGE_REGISTER 0
#define CTRL_REGISTER_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CTRL_REGISTER_CAPTURE 0
#define CTRL_REGISTER_DATA_WIDTH 2
#define CTRL_REGISTER_DO_TEST_BENCH_WIRING 0
#define CTRL_REGISTER_DRIVEN_SIM_VALUE 0
#define CTRL_REGISTER_EDGE_TYPE NONE
#define CTRL_REGISTER_FREQ 50000000
#define CTRL_REGISTER_HAS_IN 0
#define CTRL_REGISTER_HAS_OUT 1
#define CTRL_REGISTER_HAS_TRI 0
#define CTRL_REGISTER_IRQ_TYPE NONE
#define CTRL_REGISTER_RESET_VALUE 0

/*
 * Macros for device 'lfsr_reset_value_reg', class 'altera_avalon_pio'
 * The macros are prefixed with 'LFSR_RESET_VALUE_REG_'.
 * The prefix is the slave descriptor.
 */
#define LFSR_RESET_VALUE_REG_COMPONENT_TYPE altera_avalon_pio
#define LFSR_RESET_VALUE_REG_COMPONENT_NAME lfsr_reset_value_reg
#define LFSR_RESET_VALUE_REG_BASE 0x8020
#define LFSR_RESET_VALUE_REG_SPAN 16
#define LFSR_RESET_VALUE_REG_END 0x802f
#define LFSR_RESET_VALUE_REG_BIT_CLEARING_EDGE_REGISTER 0
#define LFSR_RESET_VALUE_REG_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LFSR_RESET_VALUE_REG_CAPTURE 0
#define LFSR_RESET_VALUE_REG_DATA_WIDTH 32
#define LFSR_RESET_VALUE_REG_DO_TEST_BENCH_WIRING 0
#define LFSR_RESET_VALUE_REG_DRIVEN_SIM_VALUE 0
#define LFSR_RESET_VALUE_REG_EDGE_TYPE NONE
#define LFSR_RESET_VALUE_REG_FREQ 50000000
#define LFSR_RESET_VALUE_REG_HAS_IN 0
#define LFSR_RESET_VALUE_REG_HAS_OUT 1
#define LFSR_RESET_VALUE_REG_HAS_TRI 0
#define LFSR_RESET_VALUE_REG_IRQ_TYPE NONE
#define LFSR_RESET_VALUE_REG_RESET_VALUE 1063321489

/*
 * Macros for device 'alt_vip_cl_cvo_hdmi', class 'alt_vip_cl_cvo'
 * The macros are prefixed with 'ALT_VIP_CL_CVO_HDMI_'.
 * The prefix is the slave descriptor.
 */
#define ALT_VIP_CL_CVO_HDMI_COMPONENT_TYPE alt_vip_cl_cvo
#define ALT_VIP_CL_CVO_HDMI_COMPONENT_NAME alt_vip_cl_cvo_hdmi
#define ALT_VIP_CL_CVO_HDMI_BASE 0x9000
#define ALT_VIP_CL_CVO_HDMI_SPAN 1024
#define ALT_VIP_CL_CVO_HDMI_END 0x93ff
#define ALT_VIP_CL_CVO_HDMI_IRQ 9

/*
 * Macros for device 'pll_stream_reconfig', class 'altera_pll_reconfig'
 * The macros are prefixed with 'PLL_STREAM_RECONFIG_'.
 * The prefix is the slave descriptor.
 */
#define PLL_STREAM_RECONFIG_COMPONENT_TYPE altera_pll_reconfig
#define PLL_STREAM_RECONFIG_COMPONENT_NAME pll_stream_reconfig
#define PLL_STREAM_RECONFIG_BASE 0xa000
#define PLL_STREAM_RECONFIG_SPAN 256
#define PLL_STREAM_RECONFIG_END 0xa0ff

/*
 * Macros for device 'pll_reset_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'PLL_RESET_PIO_'.
 * The prefix is the slave descriptor.
 */
#define PLL_RESET_PIO_COMPONENT_TYPE altera_avalon_pio
#define PLL_RESET_PIO_COMPONENT_NAME pll_reset_pio
#define PLL_RESET_PIO_BASE 0xb000
#define PLL_RESET_PIO_SPAN 32
#define PLL_RESET_PIO_END 0xb01f
#define PLL_RESET_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define PLL_RESET_PIO_BIT_MODIFYING_OUTPUT_REGISTER 1
#define PLL_RESET_PIO_CAPTURE 0
#define PLL_RESET_PIO_DATA_WIDTH 1
#define PLL_RESET_PIO_DO_TEST_BENCH_WIRING 0
#define PLL_RESET_PIO_DRIVEN_SIM_VALUE 0
#define PLL_RESET_PIO_EDGE_TYPE NONE
#define PLL_RESET_PIO_FREQ 50000000
#define PLL_RESET_PIO_HAS_IN 0
#define PLL_RESET_PIO_HAS_OUT 1
#define PLL_RESET_PIO_HAS_TRI 0
#define PLL_RESET_PIO_IRQ_TYPE NONE
#define PLL_RESET_PIO_RESET_VALUE 0

/*
 * Macros for device 'cvo_reset_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'CVO_RESET_PIO_'.
 * The prefix is the slave descriptor.
 */
#define CVO_RESET_PIO_COMPONENT_TYPE altera_avalon_pio
#define CVO_RESET_PIO_COMPONENT_NAME cvo_reset_pio
#define CVO_RESET_PIO_BASE 0xc000
#define CVO_RESET_PIO_SPAN 32
#define CVO_RESET_PIO_END 0xc01f
#define CVO_RESET_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define CVO_RESET_PIO_BIT_MODIFYING_OUTPUT_REGISTER 1
#define CVO_RESET_PIO_CAPTURE 0
#define CVO_RESET_PIO_DATA_WIDTH 1
#define CVO_RESET_PIO_DO_TEST_BENCH_WIRING 0
#define CVO_RESET_PIO_DRIVEN_SIM_VALUE 0
#define CVO_RESET_PIO_EDGE_TYPE NONE
#define CVO_RESET_PIO_FREQ 50000000
#define CVO_RESET_PIO_HAS_IN 0
#define CVO_RESET_PIO_HAS_OUT 1
#define CVO_RESET_PIO_HAS_TRI 0
#define CVO_RESET_PIO_IRQ_TYPE NONE
#define CVO_RESET_PIO_RESET_VALUE 0

/*
 * Macros for device 'locked_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LOCKED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LOCKED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LOCKED_PIO_COMPONENT_NAME locked_pio
#define LOCKED_PIO_BASE 0xd000
#define LOCKED_PIO_SPAN 32
#define LOCKED_PIO_END 0xd01f
#define LOCKED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LOCKED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 1
#define LOCKED_PIO_CAPTURE 0
#define LOCKED_PIO_DATA_WIDTH 1
#define LOCKED_PIO_DO_TEST_BENCH_WIRING 0
#define LOCKED_PIO_DRIVEN_SIM_VALUE 0
#define LOCKED_PIO_EDGE_TYPE NONE
#define LOCKED_PIO_FREQ 50000000
#define LOCKED_PIO_HAS_IN 1
#define LOCKED_PIO_HAS_OUT 0
#define LOCKED_PIO_HAS_TRI 0
#define LOCKED_PIO_IRQ_TYPE NONE
#define LOCKED_PIO_RESET_VALUE 0

/*
 * Macros for device 'gpio_0_a', class 'altera_avalon_pio'
 * The macros are prefixed with 'GPIO_0_A_'.
 * The prefix is the slave descriptor.
 */
#define GPIO_0_A_COMPONENT_TYPE altera_avalon_pio
#define GPIO_0_A_COMPONENT_NAME gpio_0_a
#define GPIO_0_A_BASE 0x10000
#define GPIO_0_A_SPAN 32
#define GPIO_0_A_END 0x1001f
#define GPIO_0_A_BIT_CLEARING_EDGE_REGISTER 1
#define GPIO_0_A_BIT_MODIFYING_OUTPUT_REGISTER 1
#define GPIO_0_A_CAPTURE 1
#define GPIO_0_A_DATA_WIDTH 18
#define GPIO_0_A_DO_TEST_BENCH_WIRING 0
#define GPIO_0_A_DRIVEN_SIM_VALUE 0
#define GPIO_0_A_EDGE_TYPE RISING
#define GPIO_0_A_FREQ 50000000
#define GPIO_0_A_HAS_IN 0
#define GPIO_0_A_HAS_OUT 0
#define GPIO_0_A_HAS_TRI 1
#define GPIO_0_A_IRQ_TYPE NONE
#define GPIO_0_A_RESET_VALUE 0

/*
 * Macros for device 'gpio_0_b', class 'altera_avalon_pio'
 * The macros are prefixed with 'GPIO_0_B_'.
 * The prefix is the slave descriptor.
 */
#define GPIO_0_B_COMPONENT_TYPE altera_avalon_pio
#define GPIO_0_B_COMPONENT_NAME gpio_0_b
#define GPIO_0_B_BASE 0x11000
#define GPIO_0_B_SPAN 32
#define GPIO_0_B_END 0x1101f
#define GPIO_0_B_BIT_CLEARING_EDGE_REGISTER 1
#define GPIO_0_B_BIT_MODIFYING_OUTPUT_REGISTER 1
#define GPIO_0_B_CAPTURE 1
#define GPIO_0_B_DATA_WIDTH 18
#define GPIO_0_B_DO_TEST_BENCH_WIRING 0
#define GPIO_0_B_DRIVEN_SIM_VALUE 0
#define GPIO_0_B_EDGE_TYPE RISING
#define GPIO_0_B_FREQ 50000000
#define GPIO_0_B_HAS_IN 0
#define GPIO_0_B_HAS_OUT 0
#define GPIO_0_B_HAS_TRI 1
#define GPIO_0_B_IRQ_TYPE NONE
#define GPIO_0_B_RESET_VALUE 0

/*
 * Macros for device 'gpio_1_a', class 'altera_avalon_pio'
 * The macros are prefixed with 'GPIO_1_A_'.
 * The prefix is the slave descriptor.
 */
#define GPIO_1_A_COMPONENT_TYPE altera_avalon_pio
#define GPIO_1_A_COMPONENT_NAME gpio_1_a
#define GPIO_1_A_BASE 0x12000
#define GPIO_1_A_SPAN 32
#define GPIO_1_A_END 0x1201f
#define GPIO_1_A_BIT_CLEARING_EDGE_REGISTER 1
#define GPIO_1_A_BIT_MODIFYING_OUTPUT_REGISTER 1
#define GPIO_1_A_CAPTURE 1
#define GPIO_1_A_DATA_WIDTH 18
#define GPIO_1_A_DO_TEST_BENCH_WIRING 0
#define GPIO_1_A_DRIVEN_SIM_VALUE 0
#define GPIO_1_A_EDGE_TYPE RISING
#define GPIO_1_A_FREQ 50000000
#define GPIO_1_A_HAS_IN 0
#define GPIO_1_A_HAS_OUT 0
#define GPIO_1_A_HAS_TRI 1
#define GPIO_1_A_IRQ_TYPE NONE
#define GPIO_1_A_RESET_VALUE 0

/*
 * Macros for device 'gpio_1_b', class 'altera_avalon_pio'
 * The macros are prefixed with 'GPIO_1_B_'.
 * The prefix is the slave descriptor.
 */
#define GPIO_1_B_COMPONENT_TYPE altera_avalon_pio
#define GPIO_1_B_COMPONENT_NAME gpio_1_b
#define GPIO_1_B_BASE 0x13000
#define GPIO_1_B_SPAN 32
#define GPIO_1_B_END 0x1301f
#define GPIO_1_B_BIT_CLEARING_EDGE_REGISTER 1
#define GPIO_1_B_BIT_MODIFYING_OUTPUT_REGISTER 1
#define GPIO_1_B_CAPTURE 1
#define GPIO_1_B_DATA_WIDTH 18
#define GPIO_1_B_DO_TEST_BENCH_WIRING 0
#define GPIO_1_B_DRIVEN_SIM_VALUE 0
#define GPIO_1_B_EDGE_TYPE RISING
#define GPIO_1_B_FREQ 50000000
#define GPIO_1_B_HAS_IN 0
#define GPIO_1_B_HAS_OUT 0
#define GPIO_1_B_HAS_TRI 1
#define GPIO_1_B_IRQ_TYPE NONE
#define GPIO_1_B_RESET_VALUE 0

/*
 * Macros for device 'MIDR', class 'altera_avalon_pio'
 * The macros are prefixed with 'MIDR_'.
 * The prefix is the slave descriptor.
 */
#define MIDR_COMPONENT_TYPE altera_avalon_pio
#define MIDR_COMPONENT_NAME MIDR
#define MIDR_BASE 0x20000
#define MIDR_SPAN 16
#define MIDR_END 0x2000f
#define MIDR_BIT_CLEARING_EDGE_REGISTER 0
#define MIDR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define MIDR_CAPTURE 0
#define MIDR_DATA_WIDTH 32
#define MIDR_DO_TEST_BENCH_WIRING 0
#define MIDR_DRIVEN_SIM_VALUE 0
#define MIDR_EDGE_TYPE NONE
#define MIDR_FREQ 50000000
#define MIDR_HAS_IN 0
#define MIDR_HAS_OUT 1
#define MIDR_HAS_TRI 0
#define MIDR_IRQ_TYPE NONE
#define MIDR_RESET_VALUE 0

/*
 * Macros for device 'CTR', class 'altera_avalon_pio'
 * The macros are prefixed with 'CTR_'.
 * The prefix is the slave descriptor.
 */
#define CTR_COMPONENT_TYPE altera_avalon_pio
#define CTR_COMPONENT_NAME CTR
#define CTR_BASE 0x20010
#define CTR_SPAN 16
#define CTR_END 0x2001f
#define CTR_BIT_CLEARING_EDGE_REGISTER 0
#define CTR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CTR_CAPTURE 0
#define CTR_DATA_WIDTH 32
#define CTR_DO_TEST_BENCH_WIRING 0
#define CTR_DRIVEN_SIM_VALUE 0
#define CTR_EDGE_TYPE NONE
#define CTR_FREQ 50000000
#define CTR_HAS_IN 0
#define CTR_HAS_OUT 1
#define CTR_HAS_TRI 0
#define CTR_IRQ_TYPE NONE
#define CTR_RESET_VALUE 0

/*
 * Macros for device 'TCMTR', class 'altera_avalon_pio'
 * The macros are prefixed with 'TCMTR_'.
 * The prefix is the slave descriptor.
 */
#define TCMTR_COMPONENT_TYPE altera_avalon_pio
#define TCMTR_COMPONENT_NAME TCMTR
#define TCMTR_BASE 0x20020
#define TCMTR_SPAN 16
#define TCMTR_END 0x2002f
#define TCMTR_BIT_CLEARING_EDGE_REGISTER 0
#define TCMTR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TCMTR_CAPTURE 0
#define TCMTR_DATA_WIDTH 32
#define TCMTR_DO_TEST_BENCH_WIRING 0
#define TCMTR_DRIVEN_SIM_VALUE 0
#define TCMTR_EDGE_TYPE NONE
#define TCMTR_FREQ 50000000
#define TCMTR_HAS_IN 0
#define TCMTR_HAS_OUT 1
#define TCMTR_HAS_TRI 0
#define TCMTR_IRQ_TYPE NONE
#define TCMTR_RESET_VALUE 0

/*
 * Macros for device 'TLBTR', class 'altera_avalon_pio'
 * The macros are prefixed with 'TLBTR_'.
 * The prefix is the slave descriptor.
 */
#define TLBTR_COMPONENT_TYPE altera_avalon_pio
#define TLBTR_COMPONENT_NAME TLBTR
#define TLBTR_BASE 0x20030
#define TLBTR_SPAN 16
#define TLBTR_END 0x2003f
#define TLBTR_BIT_CLEARING_EDGE_REGISTER 0
#define TLBTR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TLBTR_CAPTURE 0
#define TLBTR_DATA_WIDTH 32
#define TLBTR_DO_TEST_BENCH_WIRING 0
#define TLBTR_DRIVEN_SIM_VALUE 0
#define TLBTR_EDGE_TYPE NONE
#define TLBTR_FREQ 50000000
#define TLBTR_HAS_IN 0
#define TLBTR_HAS_OUT 1
#define TLBTR_HAS_TRI 0
#define TLBTR_IRQ_TYPE NONE
#define TLBTR_RESET_VALUE 0

/*
 * Macros for device 'MPIDR', class 'altera_avalon_pio'
 * The macros are prefixed with 'MPIDR_'.
 * The prefix is the slave descriptor.
 */
#define MPIDR_COMPONENT_TYPE altera_avalon_pio
#define MPIDR_COMPONENT_NAME MPIDR
#define MPIDR_BASE 0x20040
#define MPIDR_SPAN 16
#define MPIDR_END 0x2004f
#define MPIDR_BIT_CLEARING_EDGE_REGISTER 0
#define MPIDR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define MPIDR_CAPTURE 0
#define MPIDR_DATA_WIDTH 32
#define MPIDR_DO_TEST_BENCH_WIRING 0
#define MPIDR_DRIVEN_SIM_VALUE 0
#define MPIDR_EDGE_TYPE NONE
#define MPIDR_FREQ 50000000
#define MPIDR_HAS_IN 0
#define MPIDR_HAS_OUT 1
#define MPIDR_HAS_TRI 0
#define MPIDR_IRQ_TYPE NONE
#define MPIDR_RESET_VALUE 0

/*
 * Macros for device 'REVIDR', class 'altera_avalon_pio'
 * The macros are prefixed with 'REVIDR_'.
 * The prefix is the slave descriptor.
 */
#define REVIDR_COMPONENT_TYPE altera_avalon_pio
#define REVIDR_COMPONENT_NAME REVIDR
#define REVIDR_BASE 0x20050
#define REVIDR_SPAN 16
#define REVIDR_END 0x2005f
#define REVIDR_BIT_CLEARING_EDGE_REGISTER 0
#define REVIDR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define REVIDR_CAPTURE 0
#define REVIDR_DATA_WIDTH 32
#define REVIDR_DO_TEST_BENCH_WIRING 0
#define REVIDR_DRIVEN_SIM_VALUE 0
#define REVIDR_EDGE_TYPE NONE
#define REVIDR_FREQ 50000000
#define REVIDR_HAS_IN 0
#define REVIDR_HAS_OUT 1
#define REVIDR_HAS_TRI 0
#define REVIDR_IRQ_TYPE NONE
#define REVIDR_RESET_VALUE 0

/*
 * Macros for device 'ID_PFR0', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_PFR0_'.
 * The prefix is the slave descriptor.
 */
#define ID_PFR0_COMPONENT_TYPE altera_avalon_pio
#define ID_PFR0_COMPONENT_NAME ID_PFR0
#define ID_PFR0_BASE 0x20060
#define ID_PFR0_SPAN 16
#define ID_PFR0_END 0x2006f
#define ID_PFR0_BIT_CLEARING_EDGE_REGISTER 0
#define ID_PFR0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_PFR0_CAPTURE 0
#define ID_PFR0_DATA_WIDTH 32
#define ID_PFR0_DO_TEST_BENCH_WIRING 0
#define ID_PFR0_DRIVEN_SIM_VALUE 0
#define ID_PFR0_EDGE_TYPE NONE
#define ID_PFR0_FREQ 50000000
#define ID_PFR0_HAS_IN 0
#define ID_PFR0_HAS_OUT 1
#define ID_PFR0_HAS_TRI 0
#define ID_PFR0_IRQ_TYPE NONE
#define ID_PFR0_RESET_VALUE 0

/*
 * Macros for device 'ID_PFR1', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_PFR1_'.
 * The prefix is the slave descriptor.
 */
#define ID_PFR1_COMPONENT_TYPE altera_avalon_pio
#define ID_PFR1_COMPONENT_NAME ID_PFR1
#define ID_PFR1_BASE 0x20070
#define ID_PFR1_SPAN 16
#define ID_PFR1_END 0x2007f
#define ID_PFR1_BIT_CLEARING_EDGE_REGISTER 0
#define ID_PFR1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_PFR1_CAPTURE 0
#define ID_PFR1_DATA_WIDTH 32
#define ID_PFR1_DO_TEST_BENCH_WIRING 0
#define ID_PFR1_DRIVEN_SIM_VALUE 0
#define ID_PFR1_EDGE_TYPE NONE
#define ID_PFR1_FREQ 50000000
#define ID_PFR1_HAS_IN 0
#define ID_PFR1_HAS_OUT 1
#define ID_PFR1_HAS_TRI 0
#define ID_PFR1_IRQ_TYPE NONE
#define ID_PFR1_RESET_VALUE 0

/*
 * Macros for device 'ID_DFR0', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_DFR0_'.
 * The prefix is the slave descriptor.
 */
#define ID_DFR0_COMPONENT_TYPE altera_avalon_pio
#define ID_DFR0_COMPONENT_NAME ID_DFR0
#define ID_DFR0_BASE 0x20080
#define ID_DFR0_SPAN 16
#define ID_DFR0_END 0x2008f
#define ID_DFR0_BIT_CLEARING_EDGE_REGISTER 0
#define ID_DFR0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_DFR0_CAPTURE 0
#define ID_DFR0_DATA_WIDTH 32
#define ID_DFR0_DO_TEST_BENCH_WIRING 0
#define ID_DFR0_DRIVEN_SIM_VALUE 0
#define ID_DFR0_EDGE_TYPE NONE
#define ID_DFR0_FREQ 50000000
#define ID_DFR0_HAS_IN 0
#define ID_DFR0_HAS_OUT 1
#define ID_DFR0_HAS_TRI 0
#define ID_DFR0_IRQ_TYPE NONE
#define ID_DFR0_RESET_VALUE 0

/*
 * Macros for device 'ID_AFR0', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_AFR0_'.
 * The prefix is the slave descriptor.
 */
#define ID_AFR0_COMPONENT_TYPE altera_avalon_pio
#define ID_AFR0_COMPONENT_NAME ID_AFR0
#define ID_AFR0_BASE 0x20090
#define ID_AFR0_SPAN 16
#define ID_AFR0_END 0x2009f
#define ID_AFR0_BIT_CLEARING_EDGE_REGISTER 0
#define ID_AFR0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_AFR0_CAPTURE 0
#define ID_AFR0_DATA_WIDTH 32
#define ID_AFR0_DO_TEST_BENCH_WIRING 0
#define ID_AFR0_DRIVEN_SIM_VALUE 0
#define ID_AFR0_EDGE_TYPE NONE
#define ID_AFR0_FREQ 50000000
#define ID_AFR0_HAS_IN 0
#define ID_AFR0_HAS_OUT 1
#define ID_AFR0_HAS_TRI 0
#define ID_AFR0_IRQ_TYPE NONE
#define ID_AFR0_RESET_VALUE 0

/*
 * Macros for device 'ID_MMFR0', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_MMFR0_'.
 * The prefix is the slave descriptor.
 */
#define ID_MMFR0_COMPONENT_TYPE altera_avalon_pio
#define ID_MMFR0_COMPONENT_NAME ID_MMFR0
#define ID_MMFR0_BASE 0x200a0
#define ID_MMFR0_SPAN 16
#define ID_MMFR0_END 0x200af
#define ID_MMFR0_BIT_CLEARING_EDGE_REGISTER 0
#define ID_MMFR0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_MMFR0_CAPTURE 0
#define ID_MMFR0_DATA_WIDTH 32
#define ID_MMFR0_DO_TEST_BENCH_WIRING 0
#define ID_MMFR0_DRIVEN_SIM_VALUE 0
#define ID_MMFR0_EDGE_TYPE NONE
#define ID_MMFR0_FREQ 50000000
#define ID_MMFR0_HAS_IN 0
#define ID_MMFR0_HAS_OUT 1
#define ID_MMFR0_HAS_TRI 0
#define ID_MMFR0_IRQ_TYPE NONE
#define ID_MMFR0_RESET_VALUE 0

/*
 * Macros for device 'ID_MMFR1', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_MMFR1_'.
 * The prefix is the slave descriptor.
 */
#define ID_MMFR1_COMPONENT_TYPE altera_avalon_pio
#define ID_MMFR1_COMPONENT_NAME ID_MMFR1
#define ID_MMFR1_BASE 0x200b0
#define ID_MMFR1_SPAN 16
#define ID_MMFR1_END 0x200bf
#define ID_MMFR1_BIT_CLEARING_EDGE_REGISTER 0
#define ID_MMFR1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_MMFR1_CAPTURE 0
#define ID_MMFR1_DATA_WIDTH 32
#define ID_MMFR1_DO_TEST_BENCH_WIRING 0
#define ID_MMFR1_DRIVEN_SIM_VALUE 0
#define ID_MMFR1_EDGE_TYPE NONE
#define ID_MMFR1_FREQ 50000000
#define ID_MMFR1_HAS_IN 0
#define ID_MMFR1_HAS_OUT 1
#define ID_MMFR1_HAS_TRI 0
#define ID_MMFR1_IRQ_TYPE NONE
#define ID_MMFR1_RESET_VALUE 0

/*
 * Macros for device 'ID_MMFR2', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_MMFR2_'.
 * The prefix is the slave descriptor.
 */
#define ID_MMFR2_COMPONENT_TYPE altera_avalon_pio
#define ID_MMFR2_COMPONENT_NAME ID_MMFR2
#define ID_MMFR2_BASE 0x200c0
#define ID_MMFR2_SPAN 16
#define ID_MMFR2_END 0x200cf
#define ID_MMFR2_BIT_CLEARING_EDGE_REGISTER 0
#define ID_MMFR2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_MMFR2_CAPTURE 0
#define ID_MMFR2_DATA_WIDTH 32
#define ID_MMFR2_DO_TEST_BENCH_WIRING 0
#define ID_MMFR2_DRIVEN_SIM_VALUE 0
#define ID_MMFR2_EDGE_TYPE NONE
#define ID_MMFR2_FREQ 50000000
#define ID_MMFR2_HAS_IN 0
#define ID_MMFR2_HAS_OUT 1
#define ID_MMFR2_HAS_TRI 0
#define ID_MMFR2_IRQ_TYPE NONE
#define ID_MMFR2_RESET_VALUE 0

/*
 * Macros for device 'ID_MMFR3', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_MMFR3_'.
 * The prefix is the slave descriptor.
 */
#define ID_MMFR3_COMPONENT_TYPE altera_avalon_pio
#define ID_MMFR3_COMPONENT_NAME ID_MMFR3
#define ID_MMFR3_BASE 0x200d0
#define ID_MMFR3_SPAN 16
#define ID_MMFR3_END 0x200df
#define ID_MMFR3_BIT_CLEARING_EDGE_REGISTER 0
#define ID_MMFR3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_MMFR3_CAPTURE 0
#define ID_MMFR3_DATA_WIDTH 32
#define ID_MMFR3_DO_TEST_BENCH_WIRING 0
#define ID_MMFR3_DRIVEN_SIM_VALUE 0
#define ID_MMFR3_EDGE_TYPE NONE
#define ID_MMFR3_FREQ 50000000
#define ID_MMFR3_HAS_IN 0
#define ID_MMFR3_HAS_OUT 1
#define ID_MMFR3_HAS_TRI 0
#define ID_MMFR3_IRQ_TYPE NONE
#define ID_MMFR3_RESET_VALUE 0

/*
 * Macros for device 'ID_ISAR0', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_ISAR0_'.
 * The prefix is the slave descriptor.
 */
#define ID_ISAR0_COMPONENT_TYPE altera_avalon_pio
#define ID_ISAR0_COMPONENT_NAME ID_ISAR0
#define ID_ISAR0_BASE 0x200e0
#define ID_ISAR0_SPAN 16
#define ID_ISAR0_END 0x200ef
#define ID_ISAR0_BIT_CLEARING_EDGE_REGISTER 0
#define ID_ISAR0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_ISAR0_CAPTURE 0
#define ID_ISAR0_DATA_WIDTH 32
#define ID_ISAR0_DO_TEST_BENCH_WIRING 0
#define ID_ISAR0_DRIVEN_SIM_VALUE 0
#define ID_ISAR0_EDGE_TYPE NONE
#define ID_ISAR0_FREQ 50000000
#define ID_ISAR0_HAS_IN 0
#define ID_ISAR0_HAS_OUT 1
#define ID_ISAR0_HAS_TRI 0
#define ID_ISAR0_IRQ_TYPE NONE
#define ID_ISAR0_RESET_VALUE 0

/*
 * Macros for device 'ID_ISAR1', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_ISAR1_'.
 * The prefix is the slave descriptor.
 */
#define ID_ISAR1_COMPONENT_TYPE altera_avalon_pio
#define ID_ISAR1_COMPONENT_NAME ID_ISAR1
#define ID_ISAR1_BASE 0x200f0
#define ID_ISAR1_SPAN 16
#define ID_ISAR1_END 0x200ff
#define ID_ISAR1_BIT_CLEARING_EDGE_REGISTER 0
#define ID_ISAR1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_ISAR1_CAPTURE 0
#define ID_ISAR1_DATA_WIDTH 32
#define ID_ISAR1_DO_TEST_BENCH_WIRING 0
#define ID_ISAR1_DRIVEN_SIM_VALUE 0
#define ID_ISAR1_EDGE_TYPE NONE
#define ID_ISAR1_FREQ 50000000
#define ID_ISAR1_HAS_IN 0
#define ID_ISAR1_HAS_OUT 1
#define ID_ISAR1_HAS_TRI 0
#define ID_ISAR1_IRQ_TYPE NONE
#define ID_ISAR1_RESET_VALUE 0

/*
 * Macros for device 'ID_ISAR2', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_ISAR2_'.
 * The prefix is the slave descriptor.
 */
#define ID_ISAR2_COMPONENT_TYPE altera_avalon_pio
#define ID_ISAR2_COMPONENT_NAME ID_ISAR2
#define ID_ISAR2_BASE 0x20100
#define ID_ISAR2_SPAN 16
#define ID_ISAR2_END 0x2010f
#define ID_ISAR2_BIT_CLEARING_EDGE_REGISTER 0
#define ID_ISAR2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_ISAR2_CAPTURE 0
#define ID_ISAR2_DATA_WIDTH 32
#define ID_ISAR2_DO_TEST_BENCH_WIRING 0
#define ID_ISAR2_DRIVEN_SIM_VALUE 0
#define ID_ISAR2_EDGE_TYPE NONE
#define ID_ISAR2_FREQ 50000000
#define ID_ISAR2_HAS_IN 0
#define ID_ISAR2_HAS_OUT 1
#define ID_ISAR2_HAS_TRI 0
#define ID_ISAR2_IRQ_TYPE NONE
#define ID_ISAR2_RESET_VALUE 0

/*
 * Macros for device 'ID_ISAR3', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_ISAR3_'.
 * The prefix is the slave descriptor.
 */
#define ID_ISAR3_COMPONENT_TYPE altera_avalon_pio
#define ID_ISAR3_COMPONENT_NAME ID_ISAR3
#define ID_ISAR3_BASE 0x20110
#define ID_ISAR3_SPAN 16
#define ID_ISAR3_END 0x2011f
#define ID_ISAR3_BIT_CLEARING_EDGE_REGISTER 0
#define ID_ISAR3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_ISAR3_CAPTURE 0
#define ID_ISAR3_DATA_WIDTH 32
#define ID_ISAR3_DO_TEST_BENCH_WIRING 0
#define ID_ISAR3_DRIVEN_SIM_VALUE 0
#define ID_ISAR3_EDGE_TYPE NONE
#define ID_ISAR3_FREQ 50000000
#define ID_ISAR3_HAS_IN 0
#define ID_ISAR3_HAS_OUT 1
#define ID_ISAR3_HAS_TRI 0
#define ID_ISAR3_IRQ_TYPE NONE
#define ID_ISAR3_RESET_VALUE 0

/*
 * Macros for device 'ID_ISAR4', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_ISAR4_'.
 * The prefix is the slave descriptor.
 */
#define ID_ISAR4_COMPONENT_TYPE altera_avalon_pio
#define ID_ISAR4_COMPONENT_NAME ID_ISAR4
#define ID_ISAR4_BASE 0x20120
#define ID_ISAR4_SPAN 16
#define ID_ISAR4_END 0x2012f
#define ID_ISAR4_BIT_CLEARING_EDGE_REGISTER 0
#define ID_ISAR4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_ISAR4_CAPTURE 0
#define ID_ISAR4_DATA_WIDTH 32
#define ID_ISAR4_DO_TEST_BENCH_WIRING 0
#define ID_ISAR4_DRIVEN_SIM_VALUE 0
#define ID_ISAR4_EDGE_TYPE NONE
#define ID_ISAR4_FREQ 50000000
#define ID_ISAR4_HAS_IN 0
#define ID_ISAR4_HAS_OUT 1
#define ID_ISAR4_HAS_TRI 0
#define ID_ISAR4_IRQ_TYPE NONE
#define ID_ISAR4_RESET_VALUE 0

/*
 * Macros for device 'ID_ISAR5', class 'altera_avalon_pio'
 * The macros are prefixed with 'ID_ISAR5_'.
 * The prefix is the slave descriptor.
 */
#define ID_ISAR5_COMPONENT_TYPE altera_avalon_pio
#define ID_ISAR5_COMPONENT_NAME ID_ISAR5
#define ID_ISAR5_BASE 0x20130
#define ID_ISAR5_SPAN 16
#define ID_ISAR5_END 0x2013f
#define ID_ISAR5_BIT_CLEARING_EDGE_REGISTER 0
#define ID_ISAR5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ID_ISAR5_CAPTURE 0
#define ID_ISAR5_DATA_WIDTH 32
#define ID_ISAR5_DO_TEST_BENCH_WIRING 0
#define ID_ISAR5_DRIVEN_SIM_VALUE 0
#define ID_ISAR5_EDGE_TYPE NONE
#define ID_ISAR5_FREQ 50000000
#define ID_ISAR5_HAS_IN 0
#define ID_ISAR5_HAS_OUT 1
#define ID_ISAR5_HAS_TRI 0
#define ID_ISAR5_IRQ_TYPE NONE
#define ID_ISAR5_RESET_VALUE 0

/*
 * Macros for device 'CCSIDR', class 'altera_avalon_pio'
 * The macros are prefixed with 'CCSIDR_'.
 * The prefix is the slave descriptor.
 */
#define CCSIDR_COMPONENT_TYPE altera_avalon_pio
#define CCSIDR_COMPONENT_NAME CCSIDR
#define CCSIDR_BASE 0x20140
#define CCSIDR_SPAN 16
#define CCSIDR_END 0x2014f
#define CCSIDR_BIT_CLEARING_EDGE_REGISTER 0
#define CCSIDR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CCSIDR_CAPTURE 0
#define CCSIDR_DATA_WIDTH 32
#define CCSIDR_DO_TEST_BENCH_WIRING 0
#define CCSIDR_DRIVEN_SIM_VALUE 0
#define CCSIDR_EDGE_TYPE NONE
#define CCSIDR_FREQ 50000000
#define CCSIDR_HAS_IN 0
#define CCSIDR_HAS_OUT 1
#define CCSIDR_HAS_TRI 0
#define CCSIDR_IRQ_TYPE NONE
#define CCSIDR_RESET_VALUE 0

/*
 * Macros for device 'CLIDR', class 'altera_avalon_pio'
 * The macros are prefixed with 'CLIDR_'.
 * The prefix is the slave descriptor.
 */
#define CLIDR_COMPONENT_TYPE altera_avalon_pio
#define CLIDR_COMPONENT_NAME CLIDR
#define CLIDR_BASE 0x20150
#define CLIDR_SPAN 16
#define CLIDR_END 0x2015f
#define CLIDR_BIT_CLEARING_EDGE_REGISTER 0
#define CLIDR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CLIDR_CAPTURE 0
#define CLIDR_DATA_WIDTH 32
#define CLIDR_DO_TEST_BENCH_WIRING 0
#define CLIDR_DRIVEN_SIM_VALUE 0
#define CLIDR_EDGE_TYPE NONE
#define CLIDR_FREQ 50000000
#define CLIDR_HAS_IN 0
#define CLIDR_HAS_OUT 1
#define CLIDR_HAS_TRI 0
#define CLIDR_IRQ_TYPE NONE
#define CLIDR_RESET_VALUE 0

/*
 * Macros for device 'AIDR', class 'altera_avalon_pio'
 * The macros are prefixed with 'AIDR_'.
 * The prefix is the slave descriptor.
 */
#define AIDR_COMPONENT_TYPE altera_avalon_pio
#define AIDR_COMPONENT_NAME AIDR
#define AIDR_BASE 0x20160
#define AIDR_SPAN 16
#define AIDR_END 0x2016f
#define AIDR_BIT_CLEARING_EDGE_REGISTER 0
#define AIDR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define AIDR_CAPTURE 0
#define AIDR_DATA_WIDTH 32
#define AIDR_DO_TEST_BENCH_WIRING 0
#define AIDR_DRIVEN_SIM_VALUE 0
#define AIDR_EDGE_TYPE NONE
#define AIDR_FREQ 50000000
#define AIDR_HAS_IN 0
#define AIDR_HAS_OUT 1
#define AIDR_HAS_TRI 0
#define AIDR_IRQ_TYPE NONE
#define AIDR_RESET_VALUE 0

/*
 * Macros for device 'CSSELR', class 'altera_avalon_pio'
 * The macros are prefixed with 'CSSELR_'.
 * The prefix is the slave descriptor.
 */
#define CSSELR_COMPONENT_TYPE altera_avalon_pio
#define CSSELR_COMPONENT_NAME CSSELR
#define CSSELR_BASE 0x20170
#define CSSELR_SPAN 16
#define CSSELR_END 0x2017f
#define CSSELR_BIT_CLEARING_EDGE_REGISTER 0
#define CSSELR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CSSELR_CAPTURE 0
#define CSSELR_DATA_WIDTH 32
#define CSSELR_DO_TEST_BENCH_WIRING 0
#define CSSELR_DRIVEN_SIM_VALUE 0
#define CSSELR_EDGE_TYPE NONE
#define CSSELR_FREQ 50000000
#define CSSELR_HAS_IN 0
#define CSSELR_HAS_OUT 1
#define CSSELR_HAS_TRI 0
#define CSSELR_IRQ_TYPE NONE
#define CSSELR_RESET_VALUE 0

#endif // HPS_0_H
